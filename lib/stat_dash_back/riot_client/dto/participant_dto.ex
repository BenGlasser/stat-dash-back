defmodule StatDashBack.RiotClient.DTO.ParticipantDto do

  alias StatDashBack.RiotClient.DTO.PerksDto

  defstruct [
    :assists,
    :baron_kills,
    :bounty_level,
    :champion_experience,
    :champion_id,
    :champion_level,
    :champion_name,
    :champion_transform,
    :consumables_purchased,
    :damage_dealt_to_buildings,
    :damage_dealt_to_objectives,
    :damage_dealt_to_turrets,
    :damage_self_mitigated,
    :deaths,
    :detector_wards_placed,
    :double_kills,
    :dragon_kills,
    :first_blood_assist,
    :first_blood_kill,
    :first_tower_assist,
    :first_tower_kill,
    :game_ended_in_early_surrender,
    :game_ended_in_surrender,
    :gold_earned,
    :gold_spent,
    :individual_position,
    :inhibitor_kills,
    :inhibitors_lost,
    :item0,
    :item1,
    :item2,
    :item3,
    :item4,
    :item5,
    :item6,
    :items_purchased,
    :killing_sprees,
    :kills,
    :lane,
    :largest_critical_strike,
    :largest_killing_spree,
    :largest_multi_kill,
    :longest_time_spent_living,
    :magic_damage_dealt,
    :magic_damage_dealt_to_champions,
    :magic_damage_taken,
    :neutral_minions_killed,
    :nexus_kills,
    :nexus_lost,
    :objectives_stolen,
    :objectives_stolen_assists,
    :participant_id,
    :penta_kills,
    :perks,
    :physical_damage_dealt,
    :physical_damage_dealt_to_champions,
    :physical_damage_taken,
    :profile_icon,
    :puuid,
    :quadra_kills,
    :riot_id,
    :role,
    :sight_wards_bought_in_game,
    :spell1_cast,
    :spell2_cast,
    :spell3_cast,
    :spell4_cast,
    :summoner1_cast,
    :summoner2_cast,
    :summoner_id,
    :summoner_level,
    :summoner_name,
    :team_early_surrendered,
    :teamId,
    :teamPosition,
    :timeCCingOthers,
    :timePlayed,
    :totalDamageDealt,
    :totalDamageDealtToChampions,
    :totalDamageShieldedOnTeammates,
    :totalDamageTaken,
    :totalHeal,
    :totalHealsOnTeammates,
    :totalMinionsKilled,
    :totalTimeCCDealt,
    :totalTimeSpentDead,
    :totalUnitsHealed,
    :tripleKills,
    :trueDamageDealt,
    :trueDamageDealtToChampions,
    :trueDamageTaken,
    :turretKills,
    :turretTakedowns,
    :turretsLost,
    :unrealKills,
    :visionScore,
    :visionWardsBoughtInGame,
    :wardsKilled,
    :wardsPlaced,
    :win
  ]

  @typedoc """
  The Participant struct represents a player's game performance.
  """
  @type t :: %__MODULE__{
          assists: Integer.t(),
          baron_kills: Integer.t(),
          bounty_level: Integer.t(),
          champion_experience: Integer.t(),
          champion_id: Integer.t(),
          champion_level: Integer.t(),
          champion_name: String.t(),
          champion_transform: String.t(),
          consumables_purchased: Integer.t(),
          damage_dealt_to_buildings: Integer.t(),
          damage_dealt_to_objectives: Integer.t(),
          damage_dealt_to_turrets: Integer.t(),
          damage_self_mitigated: Integer.t(),
          deaths: Integer.t(),
          detector_wards_placed: Integer.t(),
          double_kills: Integer.t(),
          dragon_kills: Integer.t(),
          first_blood_assist: Boolean.t(),
          first_blood_kill: Boolean.t(),
          first_tower_assist: Boolean.t(),
          first_tower_kill: Boolean.t(),
          game_ended_in_early_surrender: Boolean.t(),
          game_ended_in_surrender: Boolean.t(),
          gold_earned: Integer.t(),
          gold_spent: Integer.t(),
          individual_position: String.t(),
          inhibitor_kills: Integer.t(),
          inhibitors_lost: Integer.t(),
          item0: Integer.t(),
          item1: Integer.t(),
          item2: Integer.t(),
          item3: Integer.t(),
          item4: Integer.t(),
          item5: Integer.t(),
          item6: Integer.t(),
          items_purchased: Integer.t(),
          killing_sprees: Integer.t(),
          kills: Integer.t(),
          lane: String.t(),
          largest_critical_strike: Integer.t(),
          largest_killing_spree: Integer.t(),
          largest_multi_kill: Integer.t(),
          longest_time_spent_living: Integer.t(),
          magic_damage_dealt: Integer.t(),
          magic_damage_dealt_to_champions: Integer.t(),
          magic_damage_taken: Integer.t(),
          neutral_minions_killed: Integer.t(),
          nexus_kills: Integer.t(),
          nexus_lost: Integer.t(),
          objectives_stolen: Integer.t(),
          objectives_stolen_assists: Integer.t(),
          participant_id: Integer.t(),
          penta_kills: Integer.t(),
          perks: PerksDto.t(),
          physical_damage_dealt: Integer.t(),
          physical_damage_dealt_to_champions: Integer.t(),
          physical_damage_taken: Integer.t(),
          profile_icon: Integer.t(),
          puuid: String.t(),
          quadra_kills: Integer.t(),
          riot_id: String.t(),
          role: String.t(),
          sight_wards_bought_in_game: Integer.t(),
          spell1_cast: Integer.t(),
          spell2_cast: Integer.t(),
          spell3_cast: Integer.t(),
          spell4_cast: Integer.t(),
          summoner1_cast: Integer.t(),
          summoner2_cast: Integer.t(),
          summoner_id: String.t(),
          summoner_level: Integer.t(),
          summoner_name: String.t(),
          team_early_surrendered: Boolean.t(),
          teamId: String.t(),
          teamPosition: String.t(),
          timeCCingOthers: Integer.t(),
          timePlayed: Integer.t(),
          totalDamageDealt: Integer.t(),
          totalDamageDealtToChampions: Integer.t(),
          totalDamageShieldedOnTeammates: Integer.t(),
          totalDamageTaken: Integer.t(),
          totalHeal: Integer.t(),
          totalHealsOnTeammates: Integer.t(),
          totalMinionsKilled: Integer.t(),
          totalTimeCCDealt: Integer.t(),
          totalTimeSpentDead: Integer.t(),
          totalUnitsHealed: Integer.t(),
          tripleKills: Integer.t(),
          trueDamageDealt: Integer.t(),
          trueDamageDealtToChampions: Integer.t(),
          trueDamageTaken: Integer.t(),
          turretKills: Integer.t(),
          turretTakedowns: Integer.t(),
          turretsLost: Integer.t(),
          unrealKills: Integer.t(),
          visionScore: Integer.t(),
          visionWardsBoughtInGame: Integer.t(),
          wardsKilled: Integer.t(),
          wardsPlaced: Integer.t(),
          win: Boolean.t()
   }

   def from_map(%{} = participant) do
     %__MODULE__{
       assists: Map.get(participant, :assists, Map.get(participant, "assists", 0)),
        baron_kills: Map.get(participant, :baron_kills, Map.get(participant, "baronKills", 0)),
        bounty_level: Map.get(participant, :bounty_level, Map.get(participant, "bountyLevel", 0)),
        champion_experience: Map.get(participant, :champion_experience, Map.get(participant, "championExperience", 0)),
        champion_id: Map.get(participant, :champion_id, Map.get(participant, "championId", 0)),
        champion_level: Map.get(participant, :champion_level, Map.get(participant, "championLevel", 0)),
        champion_name: Map.get(participant, :champion_name, Map.get(participant, "championName", "")),
        champion_transform: Map.get(participant, :champion_transform, Map.get(participant, "championTransform", "")),
        consumables_purchased: Map.get(participant, :consumables_purchased, Map.get(participant, "consumablesPurchased", 0)),
        damage_dealt_to_buildings: Map.get(participant, :damage_dealt_to_buildings, Map.get(participant, "damageDealtToBuildings", 0)),
        damage_dealt_to_objectives: Map.get(participant, :damage_dealt_to_objectives, Map.get(participant, "damageDealtToObjectives", 0)),
        damage_dealt_to_turrets: Map.get(participant, :damage_dealt_to_turrets, Map.get(participant, "damageDealtToTurrets", 0)),
        damage_self_mitigated: Map.get(participant, :damage_self_mitigated, Map.get(participant, "damageSelfMitigated", 0)),
        deaths: Map.get(participant, :deaths, Map.get(participant, "deaths", 0)),
        detector_wards_placed: Map.get(participant, :detector_wards_placed, Map.get(participant, "detectorWardsPlaced", 0)),
        double_kills: Map.get(participant, :double_kills, Map.get(participant, "doubleKills", 0)),
        dragon_kills: Map.get(participant, :dragon_kills, Map.get(participant, "dragonKills", 0)),
        first_blood_assist: Map.get(participant, :first_blood_assist, Map.get(participant, "firstBloodAssist", false)),
        first_blood_kill: Map.get(participant, :first_blood_kill, Map.get(participant, "firstBloodKill", false)),
        first_tower_assist: Map.get(participant, :first_tower_assist, Map.get(participant, "firstTowerAssist", false)),
        first_tower_kill: Map.get(participant, :first_tower_kill, Map.get(participant, "firstTowerKill", false)),
        game_ended_in_early_surrender: Map.get(participant, :game_ended_in_early_surrender, Map.get(participant, "gameEndedInEarlySurrender", false)),
        game_ended_in_surrender: Map.get(participant, :game_ended_in_surrender, Map.get(participant, "gameEndedInSurrender", false)),
        gold_earned: Map.get(participant, :gold_earned, Map.get(participant, "goldEarned", 0)),
        gold_spent: Map.get(participant, :gold_spent, Map.get(participant, "goldSpent", 0)),
        individual_position: Map.get(participant, :individual_position, Map.get(participant, "individualPosition", "")),
        inhibitor_kills: Map.get(participant, :inhibitor_kills, Map.get(participant, "inhibitorKills", 0)),
        inhibitors_lost: Map.get(participant, :inhibitors_lost, Map.get(participant, "inhibitorsLost", 0)),
        item0: Map.get(participant, :item0, Map.get(participant, "item0", 0)),
        item1: Map.get(participant, :item1, Map.get(participant, "item1", 0)),
        item2: Map.get(participant, :item2, Map.get(participant, "item2", 0)),
        item3: Map.get(participant, :item3, Map.get(participant, "item3", 0)),
        item4: Map.get(participant, :item4, Map.get(participant, "item4", 0)),
        item5: Map.get(participant, :item5, Map.get(participant, "item5", 0)),
        item6: Map.get(participant, :item6, Map.get(participant, "item6", 0)),
        items_purchased: Map.get(participant, :items_purchased, Map.get(participant, "itemsPurchased", 0)),
        killing_sprees: Map.get(participant, :killing_sprees, Map.get(participant, "killingSprees", 0)),
        kills: Map.get(participant, :kills, Map.get(participant, "kills", 0)),
        lane: Map.get(participant, :lane, Map.get(participant, "lane", "")),
        largest_critical_strike: Map.get(participant, :largest_critical_strike, Map.get(participant, "largestCriticalStrike", 0)),
        largest_killing_spree: Map.get(participant, :largest_killing_spree, Map.get(participant, "largestKillingSpree", 0)),
        largest_multi_kill: Map.get(participant, :largest_multi_kill, Map.get(participant, "largestMultiKill", 0)),
        longest_time_spent_living: Map.get(participant, :longest_time_spent_living, Map.get(participant, "longestTimeSpentLiving", 0)),
        magic_damage_dealt: Map.get(participant, :magic_damage_dealt, Map.get(participant, "magicDamageDealt", 0)),
        magic_damage_dealt_to_champions: Map.get(participant, :magic_damage_dealt_to_champions, Map.get(participant, "magicDamageDealtToChampions", 0)),
        magic_damage_taken: Map.get(participant, :magic_damage_taken, Map.get(participant, "magicDamageTaken", 0)),
        neutral_minions_killed: Map.get(participant, :neutral_minions_killed, Map.get(participant, "neutralMinionsKilled", 0)),
        nexus_kills: Map.get(participant, :nexus_kills, Map.get(participant, "nexusKills", 0)),
        nexus_lost: Map.get(participant, :nexus_lost, Map.get(participant, "nexusLost", 0)),
        objectives_stolen: Map.get(participant, :objectives_stolen, Map.get(participant, "objectivesStolen", 0)),
        objectives_stolen_assists: Map.get(participant, :objectives_stolen_assists, Map.get(participant, "objectivesStolenAssists", 0)),
        participant_id: Map.get(participant, :participant_id, Map.get(participant, "participantId", 0)),
        penta_kills: Map.get(participant, :penta_kills, Map.get(participant, "pentaKills", 0)),
        perks: Map.get(participant, :perks, Map.get(participant, "perks", %PerksDto{})) |> PerksDto.from_map,
        physical_damage_dealt: Map.get(participant, :physical_damage_dealt, Map.get(participant, "physicalDamageDealt", 0)),
        physical_damage_dealt_to_champions: Map.get(participant, :physical_damage_dealt_to_champions, Map.get(participant, "physicalDamageDealtToChampions", 0)),
        physical_damage_taken: Map.get(participant, :physical_damage_taken, Map.get(participant, "physicalDamageTaken", 0)),
        profile_icon: Map.get(participant, :profile_icon, Map.get(participant, "profileIcon", 0)),
        puuid: Map.get(participant, :puuid, Map.get(participant, "puuid", "")),
        quadra_kills: Map.get(participant, :quadra_kills, Map.get(participant, "quadraKills", 0)),
        riot_id: Map.get(participant, :riot_id, Map.get(participant, "riotId", "")),
        role: Map.get(participant, :role, Map.get(participant, "role", "")),
        sight_wards_bought_in_game: Map.get(participant, :sight_wards_bought_in_game, Map.get(participant, "sightWardsBoughtInGame", 0)),
        spell1_cast: Map.get(participant, :spell1_cast, Map.get(participant, "spell1Cast", 0)),
        spell2_cast: Map.get(participant, :spell2_cast, Map.get(participant, "spell2Cast", 0)),
        spell3_cast: Map.get(participant, :spell3_cast, Map.get(participant, "spell3Cast", 0)),
        spell4_cast: Map.get(participant, :spell4_cast, Map.get(participant, "spell4Cast", 0)),
        summoner1_cast: Map.get(participant, :summoner1_cast, Map.get(participant, "summoner1Cast", 0)),
        summoner2_cast: Map.get(participant, :summoner2_cast, Map.get(participant, "summoner2Cast", 0)),
        summoner_id: Map.get(participant, :summoner_id, Map.get(participant, "summonerId", "")),
        summoner_level: Map.get(participant, :summoner_level, Map.get(participant, "summonerLevel", 0)),
        summoner_name: Map.get(participant, :summoner_name, Map.get(participant, "summonerName", "")),
        team_early_surrendered: Map.get(participant, :team_early_surrendered, Map.get(participant, "teamEarlySurrendered", false)),
        teamId: Map.get(participant, :teamId, Map.get(participant, "teamId", "")),
        teamPosition: Map.get(participant, :teamPosition, Map.get(participant, "teamPosition", "")),
        timeCCingOthers: Map.get(participant, :timeCCingOthers, Map.get(participant, "timeCCingOthers", 0)),
        timePlayed: Map.get(participant, :timePlayed, Map.get(participant, "timePlayed", 0)),
        totalDamageDealt: Map.get(participant, :totalDamageDealt, Map.get(participant, "totalDamageDealt", 0)),
        totalDamageDealtToChampions: Map.get(participant, :totalDamageDealtToChampions, Map.get(participant, "totalDamageDealtToChampions", 0)),
        totalDamageShieldedOnTeammates: Map.get(participant, :totalDamageShieldedOnTeammates, Map.get(participant, "totalDamageShieldedOnTeammates", 0)),
        totalDamageTaken: Map.get(participant, :totalDamageTaken, Map.get(participant, "totalDamageTaken", 0)),
        totalHeal: Map.get(participant, :totalHeal, Map.get(participant, "totalHeal", 0)),
        totalHealsOnTeammates: Map.get(participant, :totalHealsOnTeammates, Map.get(participant, "totalHealsOnTeammates", 0)),
        totalMinionsKilled: Map.get(participant, :totalMinionsKilled, Map.get(participant, "totalMinionsKilled", 0)),
        totalTimeCCDealt: Map.get(participant, :totalTimeCCDealt, Map.get(participant, "totalTimeCCDealt", 0)),
        totalTimeSpentDead: Map.get(participant, :totalTimeSpentDead, Map.get(participant, "totalTimeSpentDead", 0)),
        totalUnitsHealed: Map.get(participant, :totalUnitsHealed, Map.get(participant, "totalUnitsHealed", 0)),
        tripleKills: Map.get(participant, :tripleKills, Map.get(participant, "tripleKills", 0)),
        trueDamageDealt: Map.get(participant, :trueDamageDealt, Map.get(participant, "trueDamageDealt", 0)),
        trueDamageDealtToChampions: Map.get(participant, :trueDamageDealtToChampions, Map.get(participant, "trueDamageDealtToChampions", 0)),
        trueDamageTaken: Map.get(participant, :trueDamageTaken, Map.get(participant, "trueDamageTaken", 0)),
        turretKills: Map.get(participant, :turretKills, Map.get(participant, "turretKills", 0)),
        turretTakedowns: Map.get(participant, :turretTakedowns, Map.get(participant, "turretTakedowns", 0)),
        turretsLost: Map.get(participant, :turretsLost, Map.get(participant, "turretsLost", 0)),
        unrealKills: Map.get(participant, :unrealKills, Map.get(participant, "unrealKills", 0)),
        visionScore: Map.get(participant, :visionScore, Map.get(participant, "visionScore", 0)),
        visionWardsBoughtInGame: Map.get(participant, :visionWardsBoughtInGame, Map.get(participant, "visionWardsBoughtInGame", 0)),
        wardsKilled: Map.get(participant, :wardsKilled, Map.get(participant, "wardsKilled", 0)),
        wardsPlaced: Map.get(participant, :wardsPlaced, Map.get(participant, "wardsPlaced", 0)),
        win: Map.get(participant, :win, Map.get(participant, "win", false))
     }
  end
end
